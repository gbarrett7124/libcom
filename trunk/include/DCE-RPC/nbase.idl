cpp_quote("/* @(#) $Id$ */");
cpp_quote("");
cpp_quote("/*");
cpp_quote(" * Copyright (c) 2008 Mo McRoberts.");
cpp_quote(" *");
cpp_quote(" * Redistribution and use in source and binary forms, with or without");
cpp_quote(" * modification, are permitted provided that the following conditions");
cpp_quote(" * are met:");
cpp_quote(" * 1. Redistributions of source code must retain the above copyright");
cpp_quote(" *    notice, this list of conditions and the following disclaimer.");
cpp_quote(" * 2. Redistributions in binary form must reproduce the above copyright");
cpp_quote(" *    notice, this list of conditions and the following disclaimer in the");
cpp_quote(" *    documentation and/or other materials provided with the distribution.");
cpp_quote(" * 3. The names of the author(s) of this software may not be used to endorse");
cpp_quote(" *    or promote products derived from this software without specific prior");
cpp_quote(" *    written permission.");
cpp_quote(" *");
cpp_quote(" * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,");
cpp_quote(" * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY");
cpp_quote(" * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL");
cpp_quote(" * AUTHORS OF THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,");
cpp_quote(" * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED");
cpp_quote(" * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR");
cpp_quote(" * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF");
cpp_quote(" * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING");
cpp_quote(" * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS");
cpp_quote(" * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.");
cpp_quote(" */");
cpp_quote("");
cpp_quote("/*");
cpp_quote(" * Copyright (c) 2007, Novell, Inc.");
cpp_quote(" * All rights reserved.");
cpp_quote(" * ");
cpp_quote(" * Redistribution and use in source and binary forms, with or without");
cpp_quote(" * modification, are permitted provided that the following conditions");
cpp_quote(" * are met:");
cpp_quote(" * 1. Redistributions of source code must retain the above copyright");
cpp_quote(" *    notice, this list of conditions and the following disclaimer.");
cpp_quote(" * 2. Redistributions in binary form must reproduce the above copyright");
cpp_quote(" *    notice, this list of conditions and the following disclaimer in the");
cpp_quote(" *    documentation and/or other materials provided with the distribution.");
cpp_quote(" * 3. Neither the name of the Novell, Inc. nor the names of its contributors");
cpp_quote(" *    may be used to endorse or promote products derived from this software");
cpp_quote(" *    without specific prior written permission.");
cpp_quote(" *");
cpp_quote(" * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS");
cpp_quote(" * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT");
cpp_quote(" * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR");
cpp_quote(" * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT");
cpp_quote(" * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,");
cpp_quote(" * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT");
cpp_quote(" * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,");
cpp_quote(" * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY");
cpp_quote(" * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT");
cpp_quote(" * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE");
cpp_quote(" * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.");
cpp_quote(" */");
cpp_quote("");
cpp_quote("/*");
cpp_quote(" *");
cpp_quote(" * (c) Copyright 1990 OPEN SOFTWARE FOUNDATION, INC.");
cpp_quote(" * (c) Copyright 1990 HEWLETT-PACKARD COMPANY");
cpp_quote(" * (c) Copyright 1990 DIGITAL EQUIPMENT CORPORATION");
cpp_quote(" * To anyone who acknowledges that this file is provided \"AS IS\"");
cpp_quote(" * without any express or implied warranty:");
cpp_quote(" *                 permission to use, copy, modify, and distribute this");
cpp_quote(" * file for any purpose is hereby granted without fee, provided that");
cpp_quote(" * the above copyright notices and this notice appears in all source");
cpp_quote(" * code copies, and that none of the names of Open Software");
cpp_quote(" * Foundation, Inc., Hewlett-Packard Company, or Digital Equipment");
cpp_quote(" * Corporation be used in advertising or publicity pertaining to");
cpp_quote(" * distribution of the software without specific, written prior");
cpp_quote(" * permission.  Neither Open Software Foundation, Inc., Hewlett-");
cpp_quote(" * Packard Company, nor Digital Equipment Corporation makes any");
cpp_quote(" * representations about the suitability of this software for any");
cpp_quote(" * purpose.");
cpp_quote(" *");
cpp_quote(" */");
cpp_quote("");

[pointer_default(unique)]
interface nbase
{
	/* Type definitions for specific size integers */
	
	typedef unsigned small unsigned8;     /* positive 8 bit integer */
	typedef unsigned short unsigned16;    /* positive 16 bit integer */
	typedef unsigned long unsigned32;     /* positive 32 bit integer */

	typedef small signed8;                /* signed 8 bit integer */
	typedef short signed16;               /* signed 16 bit integer */
	typedef long signed32;                /* signed 32 bit integer */

	/* Type definition for 32-bit wide booleans */
	
	typedef unsigned32 boolean32;

	/* Canonical types for expressing procedure return status */
	
	typedef unsigned long error_status_t;
	const long error_status_ok = 0;

	/* Universal Unique Identifier (UUID) types */

	typedef struct
	{
		unsigned32 time_low;
		unsigned16 time_mid;
		unsigned16 time_hi_and_version;
		unsigned8 clock_seq_hi_and_reserved;
		unsigned8 clock_seq_low;
		byte node[6];
	} uuid_t, *uuid_p_t;

	/* Old UUID type */

	typedef [v1_struct] struct
	{
		unsigned long time_high;
		unsigned short time_low;
		unsigned short reserved;
		byte family;
		byte host[7];
	} uuid_old_t;

	/* Protocol Tower.
	 * The network representation of network addressing information
	 */

	typedef struct
	{
		[range(0,2000)] unsigned32 tower_length;
		[size_is(tower_length)] byte tower_octet_string[];
	} twr_t, *twr_p_t;

	/* NDR format flag type definition and values */
	const long  ndr_c_int_big_endian = 0;
	const long  ndr_c_int_little_endian = 1;
	const long  ndr_c_float_ieee = 0;
	const long  ndr_c_float_vax = 1;
	const long  ndr_c_float_cray = 2;
	const long  ndr_c_float_ibm = 3;
	const long  ndr_c_char_ascii = 0;
	const long  ndr_c_char_ebcdic = 1;

	typedef struct
	{
		unsigned8 int_rep;
		unsigned8 char_rep;
		unsigned8 float_rep;
		byte reserved;
	} ndr_format_t, *ndr_format_p_t;

	/* Network representation of a NIDL context handle */

	typedef struct ndr_context_handle
	{
		unsigned32 context_handle_attributes;
		uuid_t context_handle_uuid;
	} ndr_context_handle;

	/* International character types */
	typedef byte ISO_LATIN_1;

	typedef struct
	{
		byte row;
		byte column;
	} ISO_MULTI_LINGUAL;

	typedef struct
	{
		byte group;
		byte plane;
		byte row;
		byte column;
	} ISO_UCS;

	/*
	 * Authentication protocol IDs.  These are architectural values that
	 * are carried in RPC protocol messages.
	 */
	const long dce_c_rpc_authn_protocol_none  = 0;   /* No authentication */
	const long dce_c_rpc_authn_protocol_krb5  = 1;   /* Kerberos v5 authentication */
	const long dce_c_rpc_authn_protocol_dummy = 2;   /* Non-crypto authentication */
	const long dce_c_rpc_authn_protocol_dssa  = 3;   /* DEC DSSA authentication */
	const long dce_c_rpc_authn_protocol_gss_negotiate = 9;   /* GSS-API, SPNEGO mech */
	const long dce_c_rpc_authn_protocol_winnt         = 10;  /* NTLMSSP authentication */
	const long dce_c_rpc_authn_protocol_gss_tls        = 14; /* SSL/TLS */
	const long dce_c_rpc_authn_protocol_gss_mskrb      = 16; /* GSS-API, Kerberos mech */
	const long dce_c_rpc_authn_protocol_msn            = 17; /* MSN proprietary */
	const long dce_c_rpc_authn_protocol_dpa            = 18; /* DPA proprietary */
	const long dce_c_rpc_authn_protocol_netlogon       = 68; /* Netlogon secure channel */

	typedef unsigned8 dce_rpc_authn_protocol_id_t;

}
