cpp_quote("/* @(#) $Id$ */");
cpp_quote("");
cpp_quote("/*");
cpp_quote(" * Copyright (c) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009 Mo McRoberts.");
cpp_quote(" *");
cpp_quote(" * Redistribution and use in source and binary forms, with or without");
cpp_quote(" * modification, are permitted provided that the following conditions");
cpp_quote(" * are met:");
cpp_quote(" * 1. Redistributions of source code must retain the above copyright");
cpp_quote(" *    notice, this list of conditions and the following disclaimer.");
cpp_quote(" * 2. Redistributions in binary form must reproduce the above copyright");
cpp_quote(" *    notice, this list of conditions and the following disclaimer in the");
cpp_quote(" *    documentation and/or other materials provided with the distribution.");
cpp_quote(" * 3. The names of the author(s) of this software may not be used to endorse");
cpp_quote(" *    or promote products derived from this software without specific prior");
cpp_quote(" *    written permission.");
cpp_quote(" *");
cpp_quote(" * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,");
cpp_quote(" * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY");
cpp_quote(" * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL");
cpp_quote(" * AUTHORS OF THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,");
cpp_quote(" * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED");
cpp_quote(" * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR");
cpp_quote(" * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF");
cpp_quote(" * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING");
cpp_quote(" * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS");
cpp_quote(" * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.");
cpp_quote(" */");
cpp_quote("");

import "COM/IUnknown.idl";
[
	local,
	object,
	uuid(5AFCD459-00FE-47B9-B3D6-F7DEA5D890AC),
	pointer_default(unique)
]
interface ICoRegistry: IUnknown
{
	com_result_t RegisterClass([in] com_rco_t *rco, [out] uint32_t *key);
	com_result_t UnregisterClassKey([in] uint32_t key);
	com_result_t UnregisterClassID([in] com_rclsid_t rclsid);
	com_result_t GetClassObject([in] com_rclsid_t clsid, [in] com_context_t context, [in] com_server_t *server, [in] com_riid_t riid, [out,iid_is(riid)] void **object);
}
